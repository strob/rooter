var Triggerable = function() {
    this._events = {};
};
Triggerable.prototype.on = function(event, cb) {
    if(event in this._events) {
        this._events[event].push(cb);
    }
    else {
        throw("NoSuchEvent");
    }
};

/* Removes the given callback from an event; if no callback is
 * provided, the event is emptied.
 */
Triggerable.prototype.disconnect = function(event, cb) {
    var that = this;
    if(cb) {
        this._events[event].forEach(function(ev,idx) {
            if(cb === ev) {
                that._events[event].splice(idx,1);
            }
        });
    }
    else {
        this._events[event] = [];
    }
};
Triggerable.prototype.trigger = function(event, payload) {
    this._events[event].forEach(function(cb) {
        cb(payload);
    });
};
Triggerable.prototype.registerEvent = function(event) {
    this._events[event] = [];
};

module.exports = Triggerable;
