// XXX: It might make more sense to make a single socket listener in
//      core.js and route events as necessary to these modules.
// see: https://github.com/learnboost/socket.io#restricting-yourself-to-a-namespace
var fs = require('fs')
  , clients = [];

function handle ( req, res, ctx ) {
    // XXX: This pattern seems like it will show up a lot -- abstract?
    fs.readFile(__dirname + '/index.html', function (err, data) {
        if (err) {
            res.writeHead(500);
            return res.end('Error loading index.html');
        }
        res.writeHead(200);
        res.end(data);
    });
}

function init(ctx) {
    ctx.io
        .of('/logging')
        .on('connection', function(socket) {
            clients.push(socket);

            socket.on('disconnect', function() {
                clients.splice(clients.indexOf(socket), 1);
            });
        });

    // Register all that which we wish to log.
    // This is a somewhat different methodology than traditional logging.
    // XXX: programatically log all signals?
    ctx.rooter.on('connect', function(client) {
        log('New connection: ' + client.toString());

        client.on('disconnect', function() {
            log('Client disconnected: ' + client.toString());
        });
    });

}

function log( msg ) {
    clients.forEach(function(client) {
        client.emit('msg', {date: Date(), msg: msg});
    });
}

module.exports = {handle: handle, init: init};
